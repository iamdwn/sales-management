@using PRN221.SalesManagement.Repo.Dtos
@using PRN221.SalesManagement.Repo.SessionExtensions
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Sales Management</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
</head>

<body>
    <main role="main" class="pb-3">
        @{
            var user = Context.Session.GetObjectFromJson<UserDto>("User");
        }
        <div class="sidebar closed">
            <span class="toggle-icon"><i class="fas fa-chevron-right"></i></span>
            <nav class="nav flex-column">
                @if (user != null && user.isAuthenticated)
                {
                    <a class="nav-link" href="#">
                        <i class="fas fa-user"></i>
                        <span>Welcome, @user.Username</span>
                    </a>
                    <a class="nav-link" href="/Account/Logout">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Logout</span>
                    </a>
                }
                else
                {
                    <button class="btn sidebar-button" onclick="location.href='/Account/Login'">
                        <i class="fas fa-sign-in-alt"></i>
                        <span>Login</span>
                    </button>
                    <button class="btn sidebar-button" onclick="location.href='/Account/Register'">
                        <i class="fas fa-user-plus"></i>
                        <span>Register</span>
                    </button>
                }
            </nav>
        </div>
        <div class="container mt-4">
            @RenderBody()
        </div>
    </main>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // Initialize Three.js scene
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xf0f0f0);  // Light gray background
        const camera = new THREE.OrthographicCamera(-5, 5.5, 2, -5, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Create a group for all objects
        const group = new THREE.Group();

        // Shopping Cart
        const cartShape = new THREE.Shape();
        cartShape.moveTo(0, 0);
        cartShape.lineTo(2, 0);
        cartShape.lineTo(1.8, 2);
        cartShape.lineTo(0.2, 2);
        cartShape.lineTo(0, 0);

        const cartGeometry = new THREE.ShapeGeometry(cartShape);
        const cartMaterial = new THREE.MeshBasicMaterial({ color: 0x4a90e2 });
        const cart = new THREE.Mesh(cartGeometry, cartMaterial);
        cart.position.set(-2, -2, 0);
        group.add(cart);

        // Cart Handle
        const handleGeometry = new THREE.BoxGeometry(0.5, 1.5, 0.1);
        const handleMaterial = new THREE.MeshBasicMaterial({ color: 0x2c3e50 });
        const handle = new THREE.Mesh(handleGeometry, handleMaterial);
        handle.position.set(-1, 0.5, 0);
        group.add(handle);

        // Customer Silhouette
        const customerShape = new THREE.Shape();
        customerShape.moveTo(0, 0);
        customerShape.lineTo(1, 0);
        customerShape.lineTo(1, 2);
        customerShape.lineTo(0.8, 2.2);
        customerShape.lineTo(0.6, 2);
        customerShape.lineTo(0.4, 2);
        customerShape.lineTo(0.2, 2.2);
        customerShape.lineTo(0, 2);
        customerShape.lineTo(0, 0);

        const customerGeometry = new THREE.ShapeGeometry(customerShape);
        const customerMaterial = new THREE.MeshBasicMaterial({ color: 0x2c3e50 });
        const customer = new THREE.Mesh(customerGeometry, customerMaterial);
        customer.position.set(1, -2, 0);
        group.add(customer);

        // Add group to scene
        scene.add(group);

        camera.position.z = 5;

        // Animation
        function animate() {
            requestAnimationFrame(animate);

            // Gentle floating animation
            group.position.y = Math.sin(Date.now() * 0.001) * 0.3;

            renderer.render(scene, camera);
        }
        animate();

        // Adjust the renderer size on window resize
        window.addEventListener('resize', () => {
            const aspect = window.innerWidth / window.innerHeight;
            let width, height;
            if (aspect > 1) {
                width = 10;
                height = 10 / aspect;
            } else {
                width = 10 * aspect;
                height = 10;
            }
            camera.left = -width / 2;
            camera.right = width / 2;
            camera.top = height / 2;
            camera.bottom = -height / 2;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    </script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha384-KyZXEAg3QhqLMpG8r+Knujsl5+5hb7V2l5E5z5IB+DQCHk6KqF6L5G4iL5P2tKI6" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.6/umd/popper.min.js" integrity="sha384-oBqDVmMz4fnFO9gybCihh5P6Y5in1DQ9Dw5wShbWu3yYjA0yWQf2f5V91O4cJKBI" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js" integrity="sha384-pzjw8f+ua7Kw1TIqD2RMWfUqhr58P1kE3cP6luW1qSk9WWfoZ72xKp4q6iCvf8a+" crossorigin="anonymous"></script>

    @RenderSection("Scripts", required: false)
</body>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const sidebar = document.querySelector('.sidebar');
        const toggleIcon = document.querySelector('.toggle-icon i');

        // Function to rotate the icon
        function rotateIcon(open) {
            if (open) {
                toggleIcon.style.transform = 'rotate(0deg)';
            } else {
                toggleIcon.style.transform = 'rotate(180deg)';
            }
        }

        // Toggle sidebar on icon click
        document.querySelector('.toggle-icon').addEventListener('click', function () {
            if (sidebar.classList.contains('closed')) {
                sidebar.classList.remove('closed');
                sidebar.style.left = '0';
                rotateIcon(true);
            } else {
                sidebar.classList.add('closed');
                sidebar.style.left = '-198px';
                rotateIcon(false);
            }
        });

        // Show sidebar on hover and hide on mouse leave
        sidebar.addEventListener('mouseenter', function () {
            if (sidebar.classList.contains('closed')) {
                sidebar.style.left = '0';
                rotateIcon(true);
            }
        });

        sidebar.addEventListener('mouseleave', function () {
            if (sidebar.classList.contains('closed')) {
                sidebar.style.left = '-198px';
                rotateIcon(false);
            }
        });
    });
</script>
</html>